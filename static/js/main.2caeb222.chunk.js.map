{"version":3,"sources":["Squares.js","Board.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["Squares","_this$props","this","props","value","handleClick","react_default","a","createElement","reactstrap_es","sm","className","onClick","PureComponent","Board","_renderSquares","i","squares","src_Squares","moves","_renderCardContainer","Component","Game","state","history","Array","fill","isNext","stepNumber","lines","length","_lines$i","Object","slicedToArray","b","c","slice","current","toConsumableArray","_calculateWinner","setState","concat","console","log","status","_this$state","winner","color","_this2","_this$state2","map","step","move","desc","key","_jumpTo","_renderStatus","src_Board","_handleClick","App","src_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2caeb222.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\nimport {Col} from \"reactstrap\";\n\nclass Squares extends PureComponent {\n    render() {\n        const { value, handleClick } = this.props;\n\n        return(\n            <Col sm={4} className={\"squares-item\"} onClick={() => handleClick()}>\n                {value}\n            </Col>\n        )\n    }\n}\n\nexport default Squares;\n","import React, {Component} from 'react';\nimport './App.css';\nimport {Card, Row, Col, CardBody, Container, CardSubtitle, Button} from 'reactstrap';\nimport Squares from \"./Squares\";\n\nclass Board extends Component {\n    _renderCardContainer() {\n        return (\n            <Container>\n                <Row className={\"col-sm-7 squares-container\"}>\n                    {this._renderSquares(0)}\n                    {this._renderSquares(1)}\n                    {this._renderSquares(2)}\n                    {this._renderSquares(3)}\n                    {this._renderSquares(4)}\n                    {this._renderSquares(5)}\n                    {this._renderSquares(6)}\n                    {this._renderSquares(7)}\n                    {this._renderSquares(8)}\n                </Row>\n            </Container>\n\n        )\n    }\n\n\n\n    _renderSquares(i) {\n        const { squares, handleClick } = this.props;\n\n        return (\n            <Squares value={squares[i]} handleClick={() => handleClick(i)}/>\n        )\n    }\n\n    render() {\n        const { moves } = this.props;\n\n        return (\n            <Row>\n                <Col sm={6}>\n                    {this._renderCardContainer()}\n                </Col>\n\n                <Col sm={3}>\n                    <ul>\n                        {moves}\n                    </ul>\n                </Col>\n\n            </Row>\n        );\n    }\n}\n\nexport default Board;\n","import React, {PureComponent} from \"react\";\nimport Board from \"./Board\";\nimport {Badge, Button} from \"reactstrap\";\n\nclass Game extends PureComponent {\n    state = {\n        history: [{squares: Array(9).fill(null)}],\n        isNext: true,\n        stepNumber: 0\n    };\n\n    _calculateWinner(squares) {\n        const lines = [\n            [0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8],\n            [0, 3, 6],\n            [1, 4, 7],\n            [2, 5, 8],\n            [0, 4, 8],\n            [2, 4, 6],\n        ];\n        for (let i = 0; i < lines.length; i++) {\n            const [a, b, c] = lines[i];\n\n            if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n                return squares[a];\n            }\n        }\n        return null;\n    }\n\n    _handleClick(i) {\n        const {isNext} = this.state;\n        const history = this.state.history.slice(0, this.state.stepNumber + 1)\n        const current = history[history.length - 1];\n\n        const squares = [...current.squares];\n\n        if (this._calculateWinner(squares) || squares[i]) {\n            return;\n        }\n\n        squares[i] = isNext ? 'X' : 'O';\n\n        this.setState({\n            history: history.concat([{squares}]),\n            stepNumber: history.length,\n            isNext: !isNext\n        });\n    }\n\n    _jumpTo(stepNumber) {\n        console.log(\"stepNumber:\", stepNumber)\n        this.setState({stepNumber, isNext: (stepNumber % 2) === 0})\n    }\n\n    _renderStatus() {\n        const {isNext, history, stepNumber} = this.state;\n        const current = history[stepNumber];\n        const winner = this._calculateWinner(current.squares);\n        let status;\n\n        if (winner) {\n            status = `Winner: ${winner}`;\n        } else {\n            status = `Next player: ${isNext ? 'X' : 'O'}`;\n        }\n\n        return (\n            <Badge color=\"success badge-player\">\n                {status}\n            </Badge>\n        )\n    }\n\n    render() {\n        const {history, stepNumber} = this.state;\n        const current = history[stepNumber];\n        const moves = history.map((step, move) => {\n            const desc = move ? 'Go to move #' + move : 'Go to game start';\n\n            return (\n                <li key={move} className={'item-move'}>\n                    <Button onClick={() => this._jumpTo(move)}>{desc}</Button>\n                </li>\n            )\n        })\n        return (\n            <div>\n                {this._renderStatus()}\n                <Board squares={current.squares} handleClick={(i) => this._handleClick(i)} moves={moves}/>\n            </div>\n        )\n    }\n}\n\nexport default Game;\n","import React, {Component} from 'react';\nimport './App.css';\nimport Game from \"./Game\";\n\nclass App extends Component {\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Game/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}